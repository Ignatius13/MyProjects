//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Curdoperations
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class CRUDDBEntities : DbContext
    {
        public CRUDDBEntities()
            : base("name=CRUDDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Customer> Customers { get; set; }
        public DbSet<Reservation> Reservations { get; set; }
    
        public virtual ObjectResult<SP_Getall_Result> SP_Getall()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Getall_Result>("SP_Getall");
        }
    
        public virtual int SP_Insert(Nullable<int> reservationId, string hotel, Nullable<System.DateTime> arrival, Nullable<System.DateTime> departure, string type, Nullable<int> guest, Nullable<int> price)
        {
            var reservationIdParameter = reservationId.HasValue ?
                new ObjectParameter("ReservationId", reservationId) :
                new ObjectParameter("ReservationId", typeof(int));
    
            var hotelParameter = hotel != null ?
                new ObjectParameter("Hotel", hotel) :
                new ObjectParameter("Hotel", typeof(string));
    
            var arrivalParameter = arrival.HasValue ?
                new ObjectParameter("Arrival", arrival) :
                new ObjectParameter("Arrival", typeof(string));
    
            var departureParameter = departure.HasValue ?
                new ObjectParameter("Departure", departure) :
                new ObjectParameter("Departure", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var guestParameter = guest.HasValue ?
                new ObjectParameter("Guest", guest) :
                new ObjectParameter("Guest", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Insert", reservationIdParameter, hotelParameter, arrivalParameter, departureParameter, typeParameter, guestParameter, priceParameter);
        }
    }
}
